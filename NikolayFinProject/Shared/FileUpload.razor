@inject IWebHostEnvironment Environment
@inject IJSRuntime qqq
@using NikolayFinProject.Authentication

<h3>Avatar:</h3>

@*<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>*@

@*<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>*@

<p>
    <label>
        <InputFile OnChange="@LoadFiles" single/>
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task<UserAccount> GetAuthorizedUser()
    {
        var authState = await authenticationState;
        string userName = authState.User.Identity.Name;
        UserAccount authorizedUser = UserAccount.GetAccountProfile(userName);
        return authorizedUser;
    }

    //UserAccount userAccount = new();

    [Parameter]
    public string userName { get; set; }
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 500000;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    protected byte[] img;
    public UserAccount userAccount=new ();
    string imgSrc;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                var stream = file.OpenReadStream(maxFileSize);
                img = new byte[stream.Length];
                await stream.ReadAsync(img);
                isLoading = false;
                //userAccount.Img = img;
                UserAccount.ReplaceUserAccountToDB(GetAuthorizedUser().GetAwaiter().GetResult().UserLogin,img);
                imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(img));
            }

            catch (Exception ex)
            {
                await qqq.InvokeVoidAsync("logError", ex);
            }
        }

    }
}
