@page "/accountprofile"
@attribute [Authorize(Roles = "Administrator,User")]
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using NikolayFinProject.Data
@inject SingletonService singleton
@using NikolayFinProject.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime qqq

@*<div>
    <input class="form-control" placeholder="enter your login to search the database" @bind="_login" />
</div>*@
<h3>My Profile</h3>

<div class="row">
	<div class="container-fluid">
		<table class="table table-responsive-md">
			<tr>
				<th>Login:</th>
				<AuthorizeView>
					<Authorized>
						<td>@context.User.Identity.Name</td>
					</Authorized>
				</AuthorizeView>
			</tr>
			<tr>
				<th>Password:</th>
				<AuthorizeView>
					<Authorized>
						<td>
							<div class="password">
								@GetAuthorizedUser().GetAwaiter().GetResult().Password
							</div>
						</td>
					</Authorized>
				</AuthorizeView>
			</tr>
			<tr>
				<th>Role:</th>
				<AuthorizeView>
					<Authorized>
						<td>@GetAuthorizedUser().GetAwaiter().GetResult().Role</td>
					</Authorized>
				</AuthorizeView>
			</tr>
			<tr>
				<th>Avatar:</th>
				<AuthorizeView>
					<Authorized>
						@if (GetAuthorizedUser().GetAwaiter().GetResult().Img != null)
						{
							<img src="@string.Format("data:image/jpg;base64,{0}"
							,Convert.ToBase64String(GetAuthorizedUser().GetAwaiter().GetResult().Img))" width="90" height="90">
						}
						else
						{
							<img src="avatar_default.png" width="90" height="90">
						}
						<FileUpload></FileUpload>
					</Authorized>
				</AuthorizeView>
			</tr>

		</table>
	</div>
</div>


@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	private async Task<UserAccount> GetAuthorizedUser()
	{
		var authState = await authenticationState;
		string userName = authState.User.Identity.Name;
		UserAccount authorizedUser = UserAccount.GetAccountProfile(userName);
		return authorizedUser;
	}

	[Parameter]
	public string userName { get; set; }
	private List<IBrowserFile> loadedFiles = new();
	private long maxFileSize = 500000;
	private int maxAllowedFiles = 1;
	private bool isLoading;
	protected byte[] img;
	public UserAccount userAccount = new();
	string imgSrc;

	public async Task LoadFiles(InputFileChangeEventArgs e)
	{
		isLoading = true;
		loadedFiles.Clear();

		foreach (var file in e.GetMultipleFiles())
		{
			try
			{
				loadedFiles.Add(file);
				var stream = file.OpenReadStream(maxFileSize);
				img = new byte[stream.Length];
				await stream.ReadAsync(img);
				isLoading = false;
				userAccount.Img = img;
				imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(img));
			}

			catch (Exception ex)
			{
				await qqq.InvokeVoidAsync("logError", ex);
			}
		}

	}
  }